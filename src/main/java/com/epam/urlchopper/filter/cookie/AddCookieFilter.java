package com.epam.urlchopper.filter.cookie;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.epam.urlchopper.domain.Creator;
import com.epam.urlchopper.repository.UserRepository;

/**
 * Runs before short url generation, to ensure that a valid cookie is stored in the user's browser, and to update the session based on that cookie's value.
 * Also adds a new user to the database, if a new cookie is created.
 * Does not run before all requests, because we only want to add a new user to the database, if at least one url is generated by him.
 */
@Component("AddCookieFilter")
public class AddCookieFilter extends OncePerRequestFilter {

    private Logger logger = LoggerFactory.getLogger(AddCookieFilter.class);

    private Cookie[] cookies;

    @Autowired
    private UserRepository userRepository;

    /**
     * The userId is auto generated when persisting to the database.
     * The generated id is used in the new cookie and in the session.
     */
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        if (userIdNotFoundInSession(request)) {
            logger.info("User not found in session.");

            cookies = request.getCookies();

            if (cookies != null) {
                int i = incrementWhileCookieFound(cookies, 0);
                if (cookieNotFound(cookies, i)) {
                    logger.info("Cookie does not exist in browser");
                    Creator user = createUser();
                    Cookie cookie = createCookie(user, response);
                    addUserIdToSession(request, cookie.getValue());
                } else {
                    logger.info("Cookie exists in browser");
                }
            }
        } else {
            logger.info("User found in session: " + request.getSession().getAttribute(CookieFilter.USER_COOKIE_NAME).toString());
        }
        filterChain.doFilter(request, response);
    }

    private boolean userIdNotFoundInSession(HttpServletRequest request) {
        return request.getSession().getAttribute(CookieFilter.USER_COOKIE_NAME) == null;
    }

    private int incrementWhileCookieFound(Cookie[] cookies, int i) {
        int ret = i;
        while (ret < cookies.length && !cookieFound(cookies, ret)) {
            ret++;
        }
        return ret;
    }

    private boolean cookieFound(Cookie[] cookies, int i) {
        return cookies[i].getName().equals(CookieFilter.USER_COOKIE_NAME);
    }

    private boolean cookieNotFound(Cookie[] cookies, int i) {
        return i >= cookies.length;
    }

    private Creator createUser() {
        Creator user = userRepository.create(new Creator());
        logger.info("New user added with id: " + user.getCreatorId());
        return user;
    }

    private Cookie createCookie(Creator user, HttpServletResponse response) {
        Cookie cookie = new Cookie("urlchopper_userid", user.getCreatorIdAsString());
        cookie.setMaxAge(Integer.MAX_VALUE);
        response.addCookie(cookie);
        logger.info("Cookie added to response with userid: " + cookie.getValue());
        return cookie;
    }

    private void addUserIdToSession(HttpServletRequest httpRequest, String userId) {
        httpRequest.getSession().setAttribute(CookieFilter.USER_COOKIE_NAME, userId);
        logger.info("User added to session with id: " + userId);
    }

    public Logger getLogger() {
        return logger;
    }

    public void setLogger(Logger logger) {
        this.logger = logger;
    }

    public UserRepository getUserRepository() {
        return userRepository;
    }

    public void setUserRepository(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public Cookie[] getCookies() {
        return cookies;
    }

    public void setCookies(Cookie[] cookies) {
        this.cookies = cookies;
    }
}
